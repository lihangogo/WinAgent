<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans   
                        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-4.3.xsd">
    
    <!-- 引入属性文件 -->
   	<context:property-placeholder location="classpath:client.properties" ignore-unresolvable="true"/>
   	
	<bean id="Config" class="com.club203.beans.Configuration" scope="singleton">
		<!-- 显示界面上的不同业务类型，校内线路指在北邮校园网内使用的线路，允许不登录校园网网关 -->
		<property name="ServiceType">  
    		<list>  
        		<value>校内线路</value>  
        		<value>校外线路</value>  
        		<!-- <value>临时线路</value>   -->
    		</list>  
		</property>  
		
		<!-- 不同的代理类型 -->
		<property name="ProxyType">  
    		<list>  
    			<!-- 以连入同一台交换机的另一台机器作为出口 -->
        		<value>RouteProxy</value>  
        		<!-- 以OpenVPN隧道网关作为出口 -->
        		<value>OpenVPNProxy</value>  
        		<!-- 直接使用接入点作为代理服务器，接入服务器通过默认路由访问网络。
        			   例：接入Panabit内网代理服务器 -->
        		<value>DirectHttpProxy</value>
        		<value>DirectSocks5Proxy</value>
        		<!-- 借助SDN/OSPF引流至代理服务器，代理服务器为出口服务器。
        			   由于情况复杂，且SDN网络的接入方式发生过若干次调整，且存在若干可定制性，故增加冗余代码。
        			   例：接入SDN PMA节点代理服务器 -->
        		<value>SdnHttpProxy</value>
        		<value>SdnSocks5Proxy</value>
    		</list>  
		</property> 
		
		<!-- 暂时通过此方法实现区分校内校外连接 -->
		<property name="SchoolServiceType">  
    		<list>  
        		<value>校内线路</value>  
    		</list>  
		</property> 
		 	
		<!-- 打开不同代理类型的实现类 -->
		<property name="StartList">
			<map>  
        		<entry key="RouteProxy" value="com.club203.service.route.StartRouteProxy"/>   
        		<entry key="OpenVPNProxy" value="com.club203.service.openvpn.StartOpenvpnProxy"/>  
        		<entry key="DirectHttpProxy" value="com.club203.service.directHttp.StartHttpProxy"/>
        		<entry key="DirectSocks5Proxy" value="com.club203.service.directSocks5.StartSocks5Proxy"/>
        		<entry key="SdnHttpProxy" value="com.club203.service.sdnHttp.StartHttpProxy"/>
        		<entry key="SdnSocks5Proxy" value="com.club203.service.sdnSocks5.StartSocks5Proxy"/>
    		</map>
		</property>
		
		<!-- 关闭不同代理类型的实现类 -->
		<property name="StopList"> 
			<map>  
        		<entry key="RouteProxy" value="com.club203.service.route.StopRouteProxy"/>   
        		<entry key="OpenVPNProxy" value="com.club203.service.openvpn.StopOpenvpnProxy"/>  
        		<entry key="DirectHttpProxy" value="com.club203.service.directHttp.StopHttpProxy"/>
        		<entry key="DirectSocks5Proxy" value="com.club203.service.directSocks5.StopSocks5Proxy"/>
        		<entry key="SdnHttpProxy" value="com.club203.service.sdnHttp.StopHttpProxy"/>
        		<entry key="SdnSocks5Proxy" value="com.club203.service.sdnSocks5.StopSocks5Proxy"/>
    		</map>
		</property>	 
		
		<!-- 不同代理的断线重连的实现类 -->
		<!-- 调用位置：DetectListener -->
		<property name="ReconnectList">
			<map>
				<entry key="RouteProxy" value="com.club203.service.route.ReconnectRouteProxy"/>   
        		<entry key="OpenVPNProxy" value="com.club203.service.openvpn.ReconnectOpenvpnProxy"/>  
        		<entry key="DirectHttpProxy" value="com.club203.service.directHttp.ReconnectHttpProxy"/>
        		<entry key="DirectSocks5Proxy" value="com.club203.service.directSocks5.ReconnectSocks5Proxy"/>
        		<entry key="SdnHttpProxy" value="com.club203.service.sdnHttp.ReconnectHttpProxy"/>
        		<entry key="SdnSocks5Proxy" value="com.club203.service.sdnSocks5.ReconnectSocks5Proxy"/>
			</map>
		</property>
	</bean>
	
	<!-- 用于检验代理可用的默认Ping地址 -->
	<bean id="defaultPingVerifyServer" class="java.lang.String">
		<constructor-arg type="java.lang.String" value="${verify.ping}"/>
	</bean>
	
	<!-- 用于检验代理可用的默认DNS校验域名 -->
	<bean id="defaultDnsVerifyServer" class="java.lang.String">
		<constructor-arg type="java.lang.String" value="${verify.dns}"/>
	</bean>
	
	<!-- 用于检验代理可用的默认HTTP域名 -->
	<bean id="defaultHttpVerifyServer" class="java.lang.String">
		<constructor-arg type="java.lang.String" value="${verify.http}"/>
	</bean>
	
</beans>